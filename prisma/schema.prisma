generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        Int   @id @default(autoincrement())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  ratings   Rating[]
  actions   UserAction[]
  comments  MovieComment[]
  role UserRole @default(USER)
}

model Studio {
  id        Int   @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  movies    Movie[]
}

model Movie {
  id             Int   @id @default(autoincrement())
  title          String   @db.VarChar(255)
  year           Int      @map("year")
  runtime        Int      @map("runtime") 
  plot           String   @db.Text
  poster         String   @db.VarChar(255)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  studioId       Int?  @map("studio_id")
  studio         Studio?  @relation(fields: [studioId], references: [id])
  actors         MovieActor[]
  directors      MovieDirector[]
  genres         MovieGenre[]
  ratings        Rating[]
  actions        UserAction[]
  comments       MovieComment[]
}

model Actor {
  id        Int   @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  birthDate DateTime? @map("birth_date")
  createdAt DateTime @default(now()) @map("created_at")
  movies    MovieActor[]
}

model MovieActor {
  movieId Int @map("movie_id")
  actorId Int @map("actor_id")
  movie   Movie  @relation(fields: [movieId], references: [id])
  actor   Actor  @relation(fields: [actorId], references: [id])
  @@id([movieId, actorId])
}

model Director {
  id        Int   @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  birthDate DateTime? @map("birth_date")
  createdAt DateTime @default(now()) @map("created_at")
  movies    MovieDirector[]
}

model MovieDirector {
  movieId    Int @map("movie_id")
  directorId Int @map("director_id")
  movie      Movie  @relation(fields: [movieId], references: [id])
  director   Director  @relation(fields: [directorId], references: [id])
  @@id([movieId, directorId])
}

model Genre {
  id   Int  @id @default(autoincrement())
  name String  @unique @db.VarChar(50)
  movies MovieGenre[]
}

model MovieGenre {
  movieId Int @map("movie_id")
  genreId Int @map("genre_id")
  movie   Movie  @relation(fields: [movieId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])
  @@id([movieId, genreId])
}

model Rating {
  id        Int   @id @default(autoincrement())
  movieId   Int   @map("movie_id")
  source    String   
  rating    Decimal  
  userId    Int?  @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  @@unique([movieId, userId], name: "unique_personal_rating")
}

model UserAction {
  id       Int  @id @default(autoincrement())
  userId   Int  @unique @map("user_id")
  movieId  Int  @map("movie_id")
  watchedOn DateTime @default(now()) @map("watched_on")
  user     User    @relation(fields: [userId], references: [id])
  movie    Movie   @relation(fields: [movieId], references: [id])
  @@unique([userId, movieId])
}

model MovieComment {
  id        Int   @id @default(autoincrement())
  userId    Int   @unique @map("user_id")
  movieId   Int   @map("movie_id")
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User    @relation(fields: [userId], references: [id])
  movie     Movie   @relation(fields: [movieId], references: [id])
}
